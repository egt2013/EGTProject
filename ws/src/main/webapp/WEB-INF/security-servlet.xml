<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:sec="http://www.springframework.org/schema/security"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/security
	http://www.springframework.org/schema/security/spring-security.xsd
	http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-1.1.xsd">

<!--<sec:http auto-config="true" authentication-manager-ref="testAuthenticationManager" >-->
    <!--<sec:intercept-url pattern="/welcome*" access="ROLE_USER" />-->
    <!--<intercept-url pattern="/admin*" access="ROLE_ADMIN" />-->
    <!--<form-login login-page="/login" default-target-url="/welcome" />-->
    <!--<access-denied-handler ref="accessDeniedHandler"/>-->
    <!--<logout logout-success-url="/logout" />-->
    <!--<sec:form-login login-page="/login" default-target-url="/welcome" authentication-failure-url="/loginfailed" />-->
    <!--<sec:logout logout-success-url="/logout" />-->
<!--</sec:http>-->

    <http auto-config="true" pattern="/oauth/token" create-session="stateless"
          authentication-manager-ref="testAuthenticationManager"
          xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
        <anonymous enabled="false" />
        <sec:http-basic entry-point-ref="clientAuthenticationEntryPoint" />
        <!-- include this only if you need to authenticate clients via request
            parameters -->
        <custom-filter ref="clientCredentialsTokenEndpointFilter"
                       after="BASIC_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
    </http>

    <http pattern="/oauth/(users|clients)/.*" request-matcher="regex"
          create-session="stateless" entry-point-ref="oauthAuthenticationEntryPoint"
          use-expressions="true" xmlns="http://www.springframework.org/schema/security">
        <anonymous enabled="false" />
        <intercept-url pattern="/oauth/users/([^/].*?)/tokens/.*"
                       access="#oauth2.clientHasRole('ROLE_CLIENT') and (hasRole('ROLE_USER') or #oauth2.isClient()) and #oauth2.hasScope('write')"
                       method="DELETE" />
        <intercept-url pattern="/oauth/users/.*"
                       access="#oauth2.clientHasRole('ROLE_CLIENT') and (hasRole('ROLE_USER') or #oauth2.isClient()) and #oauth2.hasScope('read')"
                       method="GET" />
        <intercept-url pattern="/oauth/clients/.*"
                       access="#oauth2.clientHasRole('ROLE_CLIENT') and #oauth2.isClient() and #oauth2.hasScope('read')"
                       method="GET" />
        <intercept-url pattern="/**" access="denyAll()" />
        <custom-filter ref="resourceServerFilter" before="PRE_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
        <!--<expression-handler ref="oauthWebExpressionHandler" />-->
    </http>

<sec:authentication-manager id="testAuthenticationManager">
    <sec:authentication-provider user-service-ref="userDetailsService"/>
</sec:authentication-manager>


    <bean id="userDetailsService" class="com.egt.ws.security.UserDetailCustom"/>

    <!-- start: oauth-->
    <bean id="oauthAuthenticationEntryPoint"
          class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="ws" />
    </bean>

    <oauth:web-expression-handler id="oauthWebExpressionHandler" />

    <bean id="clientAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
        <property name="realmName" value="ws/client" />
        <property name="typeName" value="Basic" />
    </bean>

    <bean id="clientCredentialsTokenEndpointFilter"
          class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
        <property name="authenticationManager" ref="testAuthenticationManager" />
    </bean>

    <bean id="oauthAccessDeniedHandler"  class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />
    <bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.InMemoryTokenStore" />

    <bean id="tokenEnhancer" class="com.egt.ws.security.ProviderTokenEnhancer" />

    <bean id="tokenServices"
          class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
        <property name="tokenStore" ref="tokenStore" />
        <property name="tokenEnhancer" ref="tokenEnhancer" />
        <property name="supportRefreshToken" value="true" />
        <property name="clientDetailsService" ref="clientDetails" />
    </bean>

    <bean id="requestFactory"
          class="org.springframework.security.oauth2.provider.DefaultOAuth2RequestFactory">
        <constructor-arg name="clientDetailsService" ref="clientDetails" />
    </bean>

    <bean id="userApprovalHandler" class="com.egt.ws.security.ProviderUserApprovalHandler">
        <property name="approvalStore" ref="approvalStore" />
        <property name="clientDetailsService" ref="clientDetails" />
        <property name="requestFactory" ref="requestFactory" />
    </bean>

    <bean id="approvalStore"
          class="org.springframework.security.oauth2.provider.approval.TokenApprovalStore">
        <property name="tokenStore" ref="tokenStore" />
    </bean>



    <oauth:authorization-server
            client-details-service-ref="clientDetails" token-services-ref="tokenServices"
            user-approval-handler-ref="userApprovalHandler">
        <oauth:authorization-code />
        <oauth:implicit />
        <oauth:refresh-token />
        <oauth:client-credentials />
        <oauth:password />
    </oauth:authorization-server>

    <oauth:resource-server id="resourceServerFilter"
                           resource-id="ws" token-services-ref="tokenServices" />

    <oauth:client-details-service id="clientDetails">
        <oauth:client client-id="my-trusted-client"
                      authorized-grant-types="password,authorization_code,refresh_token,implicit"
                      authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT" scope="read,write,trust"
                      access-token-validity="60" />
        <oauth:client client-id="my-trusted-client-with-secret"
                      authorized-grant-types="password,authorization_code,refresh_token,implicit"
                      secret="somesecret" authorities="ROLE_CLIENT, ROLE_TRUSTED_CLIENT" />
        <oauth:client client-id="my-client-with-secret"
                      authorized-grant-types="client_credentials" authorities="ROLE_CLIENT"
                      scope="read" secret="secret" />
        <oauth:client client-id="my-less-trusted-client"
                      authorized-grant-types="authorization_code,implicit" authorities="ROLE_CLIENT" />
        <!--<oauth:client client-id="my-less-trusted-autoapprove-client"-->
                      <!--authorized-grant-types="implicit" authorities="ROLE_CLIENT" scope="read,write,trust"-->
                      <!--autoapprove="true" />-->
        <oauth:client client-id="my-client-with-registered-redirect"
                      authorized-grant-types="authorization_code,client_credentials"
                      authorities="ROLE_CLIENT" redirect-uri="http://anywhere?key=value"
                      scope="read,trust" />
        <oauth:client client-id="my-untrusted-client-with-registered-redirect"
                      authorized-grant-types="authorization_code" authorities="ROLE_CLIENT"
                      redirect-uri="http://anywhere" scope="read" />
        <oauth:client client-id="tonr" resource-ids="ws"
                      authorized-grant-types="authorization_code,implicit" authorities="ROLE_CLIENT"
                      scope="read,write" secret="secret" />
        <!--<oauth:client client-id="tonr-with-redirect"-->
                      <!--resource-ids="ws" authorized-grant-types="authorization_code,implicit"-->
                      <!--authorities="ROLE_CLIENT" scope="read,write" secret="secret"-->
                      <!--redirect-uri="${ws.redirect:http://localhost:8080/client/egt/redirect}" />-->
    </oauth:client-details-service>

    <!-- Finish: oauth-->
</beans>